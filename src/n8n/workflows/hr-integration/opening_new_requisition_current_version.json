{
  "nodes": [
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst parsedItems = items.map((item) => {\n  const parsedData = JSON.parse(item?.json?.data);\n  return { json: parsedData };\n});\nreturn parsedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -432,
        1200
      ],
      "id": "WEBHOOK_ID_01_PLACEHOLDER",
      "name": "convert to json object4"
    },
    {
      "parameters": {
        "url": "https://api.teamtailor.com/v1/users",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "filter[email]",
              "value": "={{ $('Slack Lookup by Email').item.json.user.profile.email }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Api-Version",
              "value": "20240404"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -656,
        1200
      ],
      "id": "WEBHOOK_ID_02_PLACEHOLDER",
      "name": "HTTP Request Users",
      "credentials": {
        "httpBearerAuth": {
          "id": "CREDENTIAL_ID_03_PLACEHOLDER",
          "name": "TeamTailor"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.teamtailor.com/v1/requisitions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token token=rddtbCpJh6CBefTGkNTalKDdLOaVyVQ-3m86RcU7"
            },
            {
              "name": "X-Api-Version",
              "value": "20240404"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/vnd.api+json",
        "body": "={{ $json.payload }}",
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1808,
        656
      ],
      "id": "WEBHOOK_ID_03_PLACEHOLDER",
      "name": "Create new requisition2",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "value": "={{ $('Get Database Page by Id').item.json.id }}",
          "mode": "id"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "tt_requisition_id|rich_text",
              "textContent": "={{ $json.data.parseJson().data.id }}"
            },
            {
              "key": "Status|status",
              "statusValue": "Done"
            },
            {
              "key": "last_synced_at|date",
              "date": "={{ $now.format('yyyy-MM-dd HH:mm') }}",
              "timezone": "Europe/Kiev"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        2256,
        496
      ],
      "id": "WEBHOOK_ID_04_PLACEHOLDER",
      "name": "Update Requisition Page",
      "credentials": {
        "notionApi": {
          "id": "CREDENTIAL_ID_01_PLACEHOLDER",
          "name": "Manager's Home"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "value": "={{ $('Get Database Page by Id').item.json.id }}",
          "mode": "id"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "last_synced_at|date",
              "date": "={{ $now.format('yyyy-MM-dd HH:mm') }}",
              "timezone": "Europe/Kiev"
            },
            {
              "key": "sync_error|rich_text",
              "textContent": "=🚨 *Notion - Opening a New Position*\n\n*Error Details:*\n• *Message:* {{ $json.error.message }}\n• *Status Code:* {{ $json.error.statusCode }}\n• *Timestamp:* {{ $json.error.timestamp }}\n{{ $json.error.details ? '• *Details:* ' + $json.error.details : '' }}\n\n*Workflow:* BambooHR Employee Creation\n*Execution ID:* {{ $execution.id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        2288,
        832
      ],
      "id": "WEBHOOK_ID_05_PLACEHOLDER",
      "name": "Update Requisition In Case Of An Error",
      "credentials": {
        "notionApi": {
          "id": "CREDENTIAL_ID_01_PLACEHOLDER",
          "name": "Manager's Home"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create a visually appealing Slack message to announce a new job opening from TeamTailor. The message should be formatted using Slack's Markdown and populated with the data from the following JSON object:\n\n*Return only ready for sent message without any of your comments or unrelated info*\n\"\"\"\"\n{{ $('Create new requisition2').item.json.data }}\n\"\"\"\"",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        2656,
        496
      ],
      "id": "WEBHOOK_ID_06_PLACEHOLDER",
      "name": "Prettify JSON object to MD text"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2992,
        1040
      ],
      "id": "WEBHOOK_ID_07_PLACEHOLDER",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "CREDENTIAL_ID_02_PLACEHOLDER",
          "name": "N8N_Test_Key"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create a visually appealing Slack message to inform that some error occure during creat new requisition data from the following JSON object:\n\n\"\"\"\"\n\n{{ $('Process Error Response').all() }}\n\"\"\"\"",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        2672,
        832
      ],
      "id": "WEBHOOK_ID_08_PLACEHOLDER",
      "name": "Prettify JSON object to MD text1"
    },
    {
      "parameters": {
        "url": "https://slack.com/api/users.lookupByEmail",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "email",
              "value": "={{ $json.property_person[0] }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1040,
        1200
      ],
      "id": "WEBHOOK_ID_09_PLACEHOLDER",
      "name": "Slack Lookup by Email",
      "credentials": {
        "slackApi": {
          "id": "CREDENTIAL_ID_04_PLACEHOLDER",
          "name": "Vira Bot"
        }
      }
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C0875TW66M9",
          "mode": "list",
          "cachedResultName": "recruiting-team"
        },
        "text": "={{ $json.text }}",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        3296,
        224
      ],
      "id": "WEBHOOK_ID_10_PLACEHOLDER",
      "name": "Send Message to recruit-team",
      "webhookId": "WEBHOOK_ID_11_PLACEHOLDER",
      "credentials": {
        "slackApi": {
          "id": "CREDENTIAL_ID_04_PLACEHOLDER",
          "name": "Vira Bot"
        }
      }
    },
    {
      "parameters": {
        "select": "user",
        "user": {
          "__rl": true,
          "value": "={{ $('Slack Lookup by Email').item.json.user.id }}",
          "mode": "id"
        },
        "text": "={{ $json.text }}",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        3296,
        624
      ],
      "id": "WEBHOOK_ID_12_PLACEHOLDER",
      "name": "Send Personal Message to Job Owner",
      "webhookId": "WEBHOOK_ID_13_PLACEHOLDER",
      "credentials": {
        "slackApi": {
          "id": "CREDENTIAL_ID_04_PLACEHOLDER",
          "name": "Vira Bot"
        }
      }
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://api.teamtailor.com/v1/requisitions/{{ $json.data.parseJson().data.id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token token=rddtbCpJh6CBefTGkNTalKDdLOaVyVQ-3m86RcU7"
            },
            {
              "name": "X-Api-Version",
              "value": "20240404"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/vnd.api+json",
        "body": "={{ $('Assemble Body Universal').item.json.payload }}",
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1808,
        1440
      ],
      "id": "WEBHOOK_ID_14_PLACEHOLDER",
      "name": "Update new requisition",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "value": "={{ $('Get Database Page by Id').item.json.id }}",
          "mode": "id"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "last_synced_at|date",
              "date": "={{ $now.format('yyyy-MM-dd HH:mm') }}",
              "timezone": "Europe/Kiev"
            },
            {
              "key": "sync_error|rich_text",
              "textContent": "={{ $json }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        2336,
        1456
      ],
      "id": "WEBHOOK_ID_15_PLACEHOLDER",
      "name": "Update Requisition In Case Of An Error1",
      "credentials": {
        "notionApi": {
          "id": "CREDENTIAL_ID_01_PLACEHOLDER",
          "name": "Manager's Home"
        }
      }
    },
    {
      "parameters": {
        "select": "user",
        "user": {
          "__rl": true,
          "value": "={{ $('Slack Lookup by Email').item.json.user.id }}",
          "mode": "id"
        },
        "text": "Job Requisition було успішно оновлено",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        2336,
        1232
      ],
      "id": "WEBHOOK_ID_16_PLACEHOLDER",
      "name": "Send Personal Message to Job Owner1",
      "webhookId": "WEBHOOK_ID_13_PLACEHOLDER",
      "credentials": {
        "slackApi": {
          "id": "CREDENTIAL_ID_04_PLACEHOLDER",
          "name": "Vira Bot"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "value": "={{ $('Get Database Page by Id').item.json.id }}",
          "mode": "id"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "last_synced_at|date",
              "date": "={{ $now.format('yyyy-MM-dd HH:mm') }}",
              "timezone": "Europe/Kiev"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        2096,
        1232
      ],
      "id": "WEBHOOK_ID_17_PLACEHOLDER",
      "name": "Update Requisition Page1",
      "credentials": {
        "notionApi": {
          "id": "CREDENTIAL_ID_01_PLACEHOLDER",
          "name": "Manager's Home"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "get",
        "pageId": {
          "__rl": true,
          "value": "={{ $json.body.data.id }}",
          "mode": "id"
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        -1360,
        1200
      ],
      "id": "WEBHOOK_ID_18_PLACEHOLDER",
      "name": "Get Database Page by Id",
      "credentials": {
        "notionApi": {
          "id": "CREDENTIAL_ID_01_PLACEHOLDER",
          "name": "Manager's Home"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.isUpdate }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    },
                    "id": "WEBHOOK_ID_19_PLACEHOLDER"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Create"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "WEBHOOK_ID_20_PLACEHOLDER",
                    "leftValue": "={{ $json.isUpdate }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Update"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        832,
        1200
      ],
      "id": "WEBHOOK_ID_21_PLACEHOLDER",
      "name": "Create or Update"
    },
    {
      "parameters": {
        "url": "=https://api.teamtailor.com/v1/requisitions/{{ $json.payload.data.id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Api-Version",
              "value": "20240404"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1072,
        1440
      ],
      "id": "WEBHOOK_ID_22_PLACEHOLDER",
      "name": "Get The Requisition in TT",
      "credentials": {
        "httpBearerAuth": {
          "id": "CREDENTIAL_ID_03_PLACEHOLDER",
          "name": "TeamTailor"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "WEBHOOK_ID_23_PLACEHOLDER",
              "leftValue": "={{ $json.data.parseJson().data.attributes['archived-at'] }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1312,
        1440
      ],
      "id": "WEBHOOK_ID_24_PLACEHOLDER",
      "name": "Check wether requisition archived or not"
    },
    {
      "parameters": {
        "jsCode": "/* ───── helpers ──────────────────────────────────────────────────────── */\nconst isoCountry = (label) => ({\n  Ukraine: 'UA',\n  Poland : 'PL',\n  Germany: 'DE',\n  'United States': 'US',\n}[label] || label);                 // fallback: use the label itself\n\n/* ───── Job Description Formatter ───────────────────────────────────── */\nconst formatJobDescription = (description) => {\n  // Handle empty or null description\n  if (!description) return '';\n  \n  let formatted = '';\n  \n  // Handle array format (Notion rich text)\n  if (Array.isArray(description)) {\n    const textParts = [];\n    for (const item of description) {\n      if (typeof item === 'object' && item !== null) {\n        if (item.text && item.text.content) {\n          textParts.push(item.text.content);\n        } else if (item.plain_text) {\n          textParts.push(item.plain_text);\n        } else {\n          textParts.push(String(item));\n        }\n      } else {\n        textParts.push(String(item));\n      }\n    }\n    formatted = textParts.join('');\n  } else {\n    // Handle string format\n    formatted = String(description).trim();\n  }\n  \n  // Process line by line to preserve indentation\n  const lines = formatted.split('\\n');\n  const processedLines = [];\n  \n  for (const line of lines) {\n    // Calculate indentation\n    const stripped = line.trimStart();\n    const indent = line.length - stripped.length;\n    \n    // Clean up multiple spaces within the line\n    let cleanedLine = stripped.split(/\\s+/).join(' ');\n    \n    // Re-add indentation\n    if (indent > 0) {\n      cleanedLine = ' '.repeat(indent) + cleanedLine;\n    }\n    \n    processedLines.push(cleanedLine);\n  }\n  \n  formatted = processedLines.join('\\n');\n  \n  // Normalize multiple line breaks (max 2)\n  formatted = formatted.replace(/\\n{3,}/g, '\\n\\n');\n  \n  // Format headers (lines ending with ':')\n  formatted = formatted.replace(/^([A-Z][^:\\n]+:)$/gm, '**$1**');\n  \n  // Standardize bullet points\n  formatted = formatted.replace(/^[-*•]\\s*/gm, '• ');\n  \n  // Standardize numbered lists\n  formatted = formatted.replace(/^(\\d+)\\.\\s*/gm, '$1. ');\n  \n  return formatted;\n};\n\n/* ───── gather inputs ───────────────────────────────────────────────── */\n// Get data from the simplified schema of Get Database Page by Id\nconst pageData = $('Get Database Page by Id').first().json;\n\n/* Notion look‑ups already performed upstream */\nconst deptNode  = $('Find Department page').first().json;\nconst roleNode  = $('Find Role page').first().json;\nconst teamNode  = $('Find Team page').first().json;\nconst userNode  = $('convert to json object4').first().json;\n\n/* IDs & names */\nconst ttId   = pageData.property_tt_requisition_id?.trim() || null;\nconst isUpdate = !!ttId;                           // ← create vs update\n\nconst departmentId = deptNode?.property_tt_department_id?.trim() || null;\nconst roleId       = roleNode?.property_tt_role_id?.trim()         || null;\nconst teamName     = teamNode?.name                                || null;\nconst userId       = userNode?.data?.[0]?.id?.trim()               || null;\n\n/* ───── salary logic ───────────────────────────────────────────────── */\nconst wantRange = pageData.property_need_salary_range ?? true;\nlet minSalary   = null;\nlet maxSalary   = null;\n\nif (wantRange) {\n  minSalary = pageData.property_min_salary ?? null;\n  maxSalary = pageData.property_max_salary ?? null;\n} else {\n  const fixed = pageData.property_fixed_salary ?? null;\n  if (fixed !== null) {\n    minSalary = fixed - 1;      // TT requires both even if equal\n    maxSalary = fixed;\n  }\n}\n\n/* ───── relationships ──────────────────────────────────────────────── */\nconst relationships = {\n  location:  { data: { id: '1200146', type: 'locations'  } },  // constant\n};\nif (departmentId) relationships.department = { data: { id: departmentId, type: 'departments' } };\nif (roleId)       relationships.role       = { data: { id: roleId,       type: 'roles'       } };\nif (userId)       relationships.user       = { data: { id: userId,       type: 'users'       } };\n\n/* ───── extract date values ─────────────────────────────────────────── */\nconst desireStartDate = pageData.property_desire_start_day_of_newcomer?.start ?? null;\n\n/* ───── payload ─────────────────────────────────────────────────────── */\nconst payload = {\n  data: {\n    type: 'requisitions',\n    ...(isUpdate ? { id: ttId } : {}),            // add id only on update\n    attributes: {\n      'job-title':          pageData.property_name ?? '',\n      'job-description':    formatJobDescription(pageData.property_job_description),\n      country:              isoCountry(pageData.property_country ?? ''),\n      'min-salary':         minSalary,\n      'max-salary':         maxSalary,\n      currency:             'USD',\n      'salary-time-unit':   (pageData.property_salary_period ?? '').toLowerCase(),\n      'number-of-openings': pageData.property_expected_number_of_hires ?? null,\n      'custom-form-answers': {\n        desire_start_day:       desireStartDate,\n        priority_of_position:   pageData.property_priority_of_position ?? null,\n        level_of_candidate:     pageData.property_level_of_candidate ?? null,\n        team:                   teamName,\n        reason:                 Array.isArray(pageData.property_reason) ? pageData.property_reason.join(', ') : (pageData.property_reason ?? ''),\n        will_there_be_a_test_task:\n                                 pageData.property_will_there_be_a_test_task ?? null,\n        please_define_hiring_stages:\n                                 formatJobDescription(pageData.property_please_define_hiring_stages),\n        key_competencies_for_position:\n                                 formatJobDescription(pageData.property_key_competencies_for_position),\n        additional_comments_for_recruiter_or_approval:\n                                 formatJobDescription(pageData.property_additional_comments_for_recruiter_or_approval)\n      },\n      status: 'pending'\n    },\n    relationships\n  }\n};\n\n/* ───── output ──────────────────────────────────────────────────────── */\nreturn {\n  payload,\n  isUpdate,\n  ttId,\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        608,
        1200
      ],
      "id": "WEBHOOK_ID_25_PLACEHOLDER",
      "name": "Assemble Body Universal"
    },
    {
      "parameters": {
        "jsCode": "// Strip the ID so Teamtailor accepts a POST.\nconst p = $('Assemble Body Universal').first().json.payload;          // shallow copy\n\nif (p?.data?.id) delete p.data.id;\n\nreturn { payload: p };                   // nothing else needed"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1536,
        1104
      ],
      "id": "WEBHOOK_ID_26_PLACEHOLDER",
      "name": "Reset for Creating"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "get",
        "pageId": {
          "__rl": true,
          "value": "={{ $('Get Database Page by Id').item.json.property_role[0] }}",
          "mode": "id"
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        -160,
        1200
      ],
      "id": "WEBHOOK_ID_27_PLACEHOLDER",
      "name": "Find Role page",
      "credentials": {
        "notionApi": {
          "id": "CREDENTIAL_ID_01_PLACEHOLDER",
          "name": "Manager's Home"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "get",
        "pageId": {
          "__rl": true,
          "value": "={{ $('Get Database Page by Id').item.json.property_team[0] }}",
          "mode": "id"
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        128,
        1200
      ],
      "id": "WEBHOOK_ID_28_PLACEHOLDER",
      "name": "Find Team page",
      "credentials": {
        "notionApi": {
          "id": "CREDENTIAL_ID_01_PLACEHOLDER",
          "name": "Manager's Home"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "get",
        "pageId": {
          "__rl": true,
          "value": "={{ $('Get Database Page by Id').item.json.property_department[0] }}",
          "mode": "id"
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        400,
        1200
      ],
      "id": "WEBHOOK_ID_29_PLACEHOLDER",
      "name": "Find Department page",
      "credentials": {
        "notionApi": {
          "id": "CREDENTIAL_ID_05_PLACEHOLDER",
          "name": "Integration QA Zapier (Notion)"
        }
      }
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C0959J8MV4K",
          "mode": "list",
          "cachedResultName": "automation-errors-notification"
        },
        "text": "={{ $json.text }}",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        3296,
        976
      ],
      "id": "WEBHOOK_ID_30_PLACEHOLDER",
      "name": "Slack",
      "webhookId": "WEBHOOK_ID_31_PLACEHOLDER",
      "credentials": {
        "slackApi": {
          "id": "CREDENTIAL_ID_04_PLACEHOLDER",
          "name": "Vira Bot"
        }
      }
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C0959J8MV4K",
          "mode": "list",
          "cachedResultName": "automation-errors-notification"
        },
        "text": "=🚨 *Notion - Opening a New Position*\n\n*Error Details:*\n• *Message:* {{ $json.error.message }}\n• *Status Code:* {{ $json.error.statusCode }}\n• *Timestamp:* {{ $json.error.timestamp }}\n{{ $json.error.details ? '• *Details:* ' + $json.error.details : '' }}\n\n*Workflow:* BambooHR Employee Creation\n*Execution ID:* {{ $execution.id }}",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        2336,
        1664
      ],
      "id": "WEBHOOK_ID_32_PLACEHOLDER",
      "name": "Send Notification to Slack Channel",
      "webhookId": "WEBHOOK_ID_31_PLACEHOLDER",
      "credentials": {
        "slackApi": {
          "id": "CREDENTIAL_ID_04_PLACEHOLDER",
          "name": "Vira Bot"
        }
      }
    },
    {
      "parameters": {
        "select": "user",
        "user": {
          "__rl": true,
          "value": "U070YR4AXK3",
          "mode": "list",
          "cachedResultName": "kateryna.gogova"
        },
        "text": "=Нова заявка вже створена в системі TeamTailor ✅  \nТепер важливо передати її на апрув.\n\nОберіть відповідний approval flow до позиції та створіть запит на затвердження, щоб мати можливість надалі працювати з вакансією.\n\n🔗 [Перейти до вибору approval-flow](https://app.teamtailor.com/companies/6m5KynaH2o4/jobs/requisition/{{ $json.property_tt_requisition_id }}/approval-flow)",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        2672,
        192
      ],
      "id": "WEBHOOK_ID_33_PLACEHOLDER",
      "name": "Send Personal Message to Pick the Approval Flow",
      "webhookId": "WEBHOOK_ID_34_PLACEHOLDER",
      "credentials": {
        "slackApi": {
          "id": "CREDENTIAL_ID_04_PLACEHOLDER",
          "name": "Vira Bot"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const error = $input.all()[0].json;\n\n// Try to determine which node failed\nlet errorSource = 'Unknown';\ntry {\n  // Get the previous node's name from execution context\n  const prevNodeName = $prevNode?.name || 'Unknown';\n  errorSource = prevNodeName;\n} catch (e) {\n  // Fallback if context is not available\n  errorSource = 'Workflow';\n}\n\nconst statusCode = error.statusCode || error.code || 500;\n\n// Build a comprehensive error response\nconst errorResponse = {\n  success: false,\n  error: {\n    message: error.message || error.description || \"An error occurred during workflow execution\",\n    statusCode: statusCode,\n    source: errorSource,\n    timestamp: new Date().toISOString()\n  }\n};\n\n// Add additional error details if available\nif (error.cause) {\n  errorResponse.error.cause = error.cause;\n}\n\nif (error.description) {\n  errorResponse.error.details = error.description;\n}\n\n// Add context about what was being attempted\nif (error.config && error.config.url) {\n  errorResponse.error.failedEndpoint = error.config.url;\n}\n\n// Log the error for debugging\nconsole.error('Workflow Error:', errorResponse);\n\nreturn [{\n  json: errorResponse\n}];"
      },
      "id": "WEBHOOK_ID_35_PLACEHOLDER",
      "name": "Process Error Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2048,
        832
      ]
    },
    {
      "parameters": {
        "jsCode": "const error = $input.all()[0].json;\n\n// Try to determine which node failed\nlet errorSource = 'Unknown';\ntry {\n  // Get the previous node's name from execution context\n  const prevNodeName = $prevNode?.name || 'Unknown';\n  errorSource = prevNodeName;\n} catch (e) {\n  // Fallback if context is not available\n  errorSource = 'Workflow';\n}\n\nconst statusCode = error.statusCode || error.code || 500;\n\n// Build a comprehensive error response\nconst errorResponse = {\n  success: false,\n  error: {\n    message: error.message || error.description || \"An error occurred during workflow execution\",\n    statusCode: statusCode,\n    source: errorSource,\n    timestamp: new Date().toISOString()\n  }\n};\n\n// Add additional error details if available\nif (error.cause) {\n  errorResponse.error.cause = error.cause;\n}\n\nif (error.description) {\n  errorResponse.error.details = error.description;\n}\n\n// Add context about what was being attempted\nif (error.config && error.config.url) {\n  errorResponse.error.failedEndpoint = error.config.url;\n}\n\n// Log the error for debugging\nconsole.error('Workflow Error:', errorResponse);\n\nreturn [{\n  json: errorResponse\n}];"
      },
      "id": "WEBHOOK_ID_36_PLACEHOLDER",
      "name": "Process Error Response1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2096,
        1552
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "WEBHOOK_ID_37_PLACEHOLDER",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1744,
        1392
      ],
      "id": "WEBHOOK_ID_38_PLACEHOLDER",
      "name": "New Page Created",
      "webhookId": "WEBHOOK_ID_37_PLACEHOLDER"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "WEBHOOK_ID_39_PLACEHOLDER",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1744,
        1008
      ],
      "id": "WEBHOOK_ID_40_PLACEHOLDER",
      "name": "Create requisition button",
      "webhookId": "WEBHOOK_ID_39_PLACEHOLDER"
    },
    {
      "parameters": {
        "amount": 120
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -1552,
        1200
      ],
      "id": "WEBHOOK_ID_41_PLACEHOLDER",
      "name": "Wait",
      "webhookId": "WEBHOOK_ID_42_PLACEHOLDER"
    }
  ],
  "connections": {
    "convert to json object4": {
      "main": [
        [
          {
            "node": "Find Role page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Users": {
      "main": [
        [
          {
            "node": "convert to json object4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new requisition2": {
      "main": [
        [
          {
            "node": "Update Requisition Page",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Requisition Page": {
      "main": [
        [
          {
            "node": "Prettify JSON object to MD text",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Personal Message to Pick the Approval Flow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Requisition In Case Of An Error": {
      "main": [
        [
          {
            "node": "Prettify JSON object to MD text1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prettify JSON object to MD text": {
      "main": [
        [
          {
            "node": "Send Message to recruit-team",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Personal Message to Job Owner",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Prettify JSON object to MD text",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Prettify JSON object to MD text1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Prettify JSON object to MD text1": {
      "main": [
        [
          {
            "node": "Slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack Lookup by Email": {
      "main": [
        [
          {
            "node": "HTTP Request Users",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update new requisition": {
      "main": [
        [
          {
            "node": "Update Requisition Page1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process Error Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Requisition Page1": {
      "main": [
        [
          {
            "node": "Send Personal Message to Job Owner1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Database Page by Id": {
      "main": [
        [
          {
            "node": "Slack Lookup by Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create or Update": {
      "main": [
        [
          {
            "node": "Create new requisition2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get The Requisition in TT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get The Requisition in TT": {
      "main": [
        [
          {
            "node": "Check wether requisition archived or not",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check wether requisition archived or not": {
      "main": [
        [
          {
            "node": "Reset for Creating",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update new requisition",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Assemble Body Universal": {
      "main": [
        [
          {
            "node": "Create or Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reset for Creating": {
      "main": [
        [
          {
            "node": "Create new requisition2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Role page": {
      "main": [
        [
          {
            "node": "Find Team page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Team page": {
      "main": [
        [
          {
            "node": "Find Department page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Department page": {
      "main": [
        [
          {
            "node": "Assemble Body Universal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Error Response": {
      "main": [
        [
          {
            "node": "Update Requisition In Case Of An Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Error Response1": {
      "main": [
        [
          {
            "node": "Update Requisition In Case Of An Error1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Notification to Slack Channel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "New Page Created": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create requisition button": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Get Database Page by Id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "New Page Created": [
      {
        "headers": {
          "host": "viragamesinc.app.n8n.cloud",
          "user-agent": "NotionAutomation",
          "content-length": "5054",
          "accept-encoding": "gzip, br",
          "baggage": "sentry-environment=production,sentry-release=0.0.4125,sentry-public_key=NOTION_DATABASE_ID_05_PLACEHOLDER,sentry-trace_id=NOTION_DATABASE_ID_06_PLACEHOLDER",
          "cdn-loop": "cloudflare; loops=1; subreqs=1",
          "cf-connecting-ip": "44.224.156.54",
          "cf-ew-via": "15",
          "cf-ipcountry": "US",
          "cf-ray": "96bda9c4936dff19-PDX",
          "cf-visitor": "{\"scheme\":\"https\"}",
          "cf-worker": "n8n.cloud",
          "content-type": "application/json",
          "sentry-trace": "NOTION_DATABASE_ID_06_PLACEHOLDER-88964a69c490988f",
          "traceparent": "00-NOTION_DATABASE_ID_07_PLACEHOLDER-c2b03054fceb10af-00",
          "x-forwarded-for": "44.224.156.54, 172.68.175.24",
          "x-forwarded-host": "viragamesinc.app.n8n.cloud",
          "x-forwarded-port": "443",
          "x-forwarded-proto": "https",
          "x-forwarded-server": "traefik-prod-users-gwc-33-6b64989c5-8f96v",
          "x-is-trusted": "yes",
          "x-real-ip": "44.224.156.54"
        },
        "params": {},
        "query": {},
        "body": {
          "source": {
            "type": "automation",
            "automation_id": "WEBHOOK_ID_43_PLACEHOLDER",
            "action_id": "WEBHOOK_ID_44_PLACEHOLDER",
            "event_id": "WEBHOOK_ID_45_PLACEHOLDER",
            "attempt": 1
          },
          "data": {
            "object": "page",
            "id": "WEBHOOK_ID_46_PLACEHOLDER",
            "created_time": "2025-08-08T08:32:00.000Z",
            "last_edited_time": "2025-08-08T08:32:00.000Z",
            "created_by": {
              "object": "user",
              "id": "WEBHOOK_ID_47_PLACEHOLDER"
            },
            "last_edited_by": {
              "object": "user",
              "id": "WEBHOOK_ID_48_PLACEHOLDER"
            },
            "cover": null,
            "icon": null,
            "parent": {
              "type": "database_id",
              "database_id": "WEBHOOK_ID_49_PLACEHOLDER"
            },
            "archived": false,
            "in_trash": false,
            "properties": {
              "Checking form info": {
                "id": "%3CP~%5B",
                "type": "formula",
                "formula": {
                  "type": "string",
                  "string": "⚠️ Country\n⚠️ Department Status must be 'Verified'\n⚠️ Role Status must be 'Verified'\n⚠️ Location\n⚠️ Department\n⚠️ Role\n⚠️ Expected number of hires\n⚠️ Hiring process start date\n⚠️ Salary Period\n⚠️ Desired start day of newcomer\n⚠️ Level of Candidate\n⚠️ Team\n⚠️ Reason\n⚠️ Will there be a test task?\n⚠️ Please define hiring stages"
                }
              },
              "Role*": {
                "id": "%3C%7CeD",
                "type": "relation",
                "relation": [],
                "has_more": false
              },
              "Person": {
                "id": "%3ETpG",
                "type": "people",
                "people": [
                  {
                    "object": "user",
                    "id": "WEBHOOK_ID_47_PLACEHOLDER",
                    "name": "Pavlo Holub",
                    "avatar_url": null,
                    "type": "person",
                    "person": {
                      "email": "your.email@yourcompany.com"
                    }
                  }
                ]
              },
              "Country*": {
                "id": "%40dZp",
                "type": "select",
                "select": null
              },
              "Role status": {
                "id": "Aork",
                "type": "rollup",
                "rollup": {
                  "type": "array",
                  "array": [],
                  "function": "show_original"
                }
              },
              "Job Description": {
                "id": "Eem%3D",
                "type": "rich_text",
                "rich_text": []
              },
              "Additional Comments for Recruiter or Approval": {
                "id": "Ff%3BM",
                "type": "rich_text",
                "rich_text": []
              },
              "Team*": {
                "id": "G_o%5D",
                "type": "relation",
                "relation": [],
                "has_more": false
              },
              "Role Outcomes": {
                "id": "H%3ACa",
                "type": "rich_text",
                "rich_text": []
              },
              "Desire start Day of newcomer*": {
                "id": "J%3C%60s",
                "type": "date",
                "date": null
              },
              "Role Competences": {
                "id": "JZO%3A",
                "type": "rich_text",
                "rich_text": []
              },
              "Min Salary": {
                "id": "Qgea",
                "type": "number",
                "number": null
              },
              "Salary Period*": {
                "id": "SbuN",
                "type": "select",
                "select": null
              },
              "Max Salary": {
                "id": "SuVS",
                "type": "number",
                "number": null
              },
              "Department*": {
                "id": "WpZP",
                "type": "relation",
                "relation": [],
                "has_more": false
              },
              "Fixed Salary": {
                "id": "XzZN",
                "type": "number",
                "number": null
              },
              "Location*": {
                "id": "YW%3Ex",
                "type": "select",
                "select": null
              },
              "last_synced_at": {
                "id": "%5D%3AYs",
                "type": "date",
                "date": null
              },
              "Will there be a test task?": {
                "id": "%5Eudy",
                "type": "select",
                "select": null
              },
              "Expected number of hires*": {
                "id": "%60CwR",
                "type": "number",
                "number": null
              },
              "Department status": {
                "id": "attf",
                "type": "rollup",
                "rollup": {
                  "type": "array",
                  "array": [],
                  "function": "show_original"
                }
              },
              "Hiring process end date": {
                "id": "ei%3Dg",
                "type": "date",
                "date": {
                  "start": "2025-10-07",
                  "end": null,
                  "time_zone": null
                }
              },
              "Role Mission": {
                "id": "hqa%5E",
                "type": "rich_text",
                "rich_text": []
              },
              "sync_error": {
                "id": "jdnc",
                "type": "rich_text",
                "rich_text": []
              },
              "Info hiring stages": {
                "id": "kVA%3C",
                "type": "formula",
                "formula": {
                  "type": "string",
                  "string": "Standard hiring stages:\n1. CV Screening Recruiter\n2. Manager CV Screen\n3. Recruiting Interview\n4. Task (if needed)\n5. Manager's Interview\n6. Offer"
                }
              },
              "Level of Candidate*": {
                "id": "niOG",
                "type": "select",
                "select": null
              },
              "tt_requisition_id": {
                "id": "o%3DUp",
                "type": "rich_text",
                "rich_text": []
              },
              "Reason*": {
                "id": "qPJw",
                "type": "multi_select",
                "multi_select": []
              },
              "Checking info": {
                "id": "spWw",
                "type": "formula",
                "formula": {
                  "type": "string",
                  "string": "⚠️ Country\n⚠️ Department Status must be 'Verified'\n⚠️ Role Status must be 'Verified'\n⚠️ Location\n⚠️ Department\n⚠️ Role\n⚠️ Expected number of hires\n⚠️ Hiring process start date\n⚠️ Salary Period\n⚠️ Desired start day of newcomer\n⚠️ Level of Candidate\n⚠️ Team\n⚠️ Reason\n⚠️ Will there be a test task?\n⚠️ Please define hiring stages"
                }
              },
              "Created by": {
                "id": "tPaj",
                "type": "created_by",
                "created_by": {
                  "object": "user",
                  "id": "WEBHOOK_ID_47_PLACEHOLDER",
                  "name": "Pavlo Holub",
                  "avatar_url": null,
                  "type": "person",
                  "person": {
                    "email": "your.email@yourcompany.com"
                  }
                }
              },
              "Status": {
                "id": "th%3D%3A",
                "type": "status",
                "status": {
                  "id": "WEBHOOK_ID_50_PLACEHOLDER",
                  "name": "New",
                  "color": "default"
                }
              },
              "Hiring process start date*": {
                "id": "uYse",
                "type": "date",
                "date": null
              },
              "Key Competencies for position": {
                "id": "wGNM",
                "type": "rich_text",
                "rich_text": []
              },
              "Please define hiring stages": {
                "id": "wq%5DQ",
                "type": "rich_text",
                "rich_text": []
              },
              "Priority of position": {
                "id": "yw%5C%3B",
                "type": "select",
                "select": null
              },
              "Need salary range?": {
                "id": "%7DPqO",
                "type": "checkbox",
                "checkbox": true
              },
              "Name": {
                "id": "title",
                "type": "title",
                "title": [
                  {
                    "type": "text",
                    "text": {
                      "content": "Lead UAM",
                      "link": null
                    },
                    "annotations": {
                      "bold": false,
                      "italic": false,
                      "strikethrough": false,
                      "underline": false,
                      "code": false,
                      "color": "default"
                    },
                    "plain_text": "Lead UAM",
                    "href": null
                  }
                ]
              }
            },
            "url": "https://www.notion.so/Lead-UAM-NOTION_DATABASE_ID_08_PLACEHOLDER",
            "public_url": null,
            "request_id": "WEBHOOK_ID_51_PLACEHOLDER"
          }
        },
        "webhookUrl": "https://viragamesinc.app.n8n.cloud/webhook/WEBHOOK_ID_37_PLACEHOLDER",
        "executionMode": "production"
      }
    ]
  },
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "NOTION_DATABASE_ID_03_PLACEHOLDERNOTION_DATABASE_ID_04_PLACEHOLDER"
  }
}