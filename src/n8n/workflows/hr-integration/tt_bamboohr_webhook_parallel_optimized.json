{
  "nodes": [
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst parsedItems = items.map((item) => {\n  const parsedData = JSON.parse(item?.json?.data);\n  return { json: parsedData };\n});\nreturn parsedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        208
      ],
      "id": "WEBHOOK_ID_01_PLACEHOLDER",
      "name": "convert to json object2"
    },
    {
      "parameters": {
        "jsCode": "// 1) Збираємо всі вхідні items\nconst items = $input.all();\n\n// 2) Парсимо requisition і віддаємо тільки department URL + сам об'єкт requisition\nconst out = [];\n\nfor (const item of items) {\n  let envelope = item?.json?.data;\n\n  // data може бути рядком або вже об'єктом\n  if (typeof envelope === 'string') {\n    try {\n      envelope = JSON.parse(envelope);          // -> { data: {...} }\n    } catch (e) {\n      throw new Error(`Invalid requisition JSON: ${e.message}`);\n    }\n  }\n\n  const requisition = envelope?.data ?? envelope;\n  if (!requisition || typeof requisition !== 'object') continue;\n\n  const deptUrl = requisition?.relationships?.department?.links?.related;\n  if (!deptUrl) continue; // якщо немає URL — нічого не віддаємо\n\n  out.push({\n    json: {\n      key: 'department',\n      url: deptUrl,\n      jobId: requisition.id ?? null,\n      requisitionData: requisition, // передаємо далі по потоку\n    },\n  });\n}\n\nreturn out;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -384,
        208
      ],
      "id": "WEBHOOK_ID_02_PLACEHOLDER",
      "name": "convert to json object3"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        224,
        32
      ],
      "id": "WEBHOOK_ID_03_PLACEHOLDER",
      "name": "Merge"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "WEBHOOK_ID_04_PLACEHOLDER",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1216,
        320
      ],
      "id": "WEBHOOK_ID_05_PLACEHOLDER",
      "name": "Webhook",
      "webhookId": "WEBHOOK_ID_04_PLACEHOLDER"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "WEBHOOK_ID_06_PLACEHOLDER",
              "leftValue": "={{ $json.body.event_name }}",
              "rightValue": "job_application.update",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "WEBHOOK_ID_07_PLACEHOLDER",
              "leftValue": "={{ $json.body.stage_name }}",
              "rightValue": "Hired",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -928,
        320
      ],
      "id": "WEBHOOK_ID_08_PLACEHOLDER",
      "name": "Hired"
    },
    {
      "parameters": {
        "jsCode": "// Fetch all job offers with pagination handling\nconst apiToken = \"YOUR_TEAMTAILOR_API_TOKEN\"; // From config.env\nconst baseUrl = 'https://api.teamtailor.com/v1/job-offers';\nconst pageSize = 30; // Maximum allowed by TeamTailor API\n\nlet allOffers = [];\nlet nextUrl = `${baseUrl}?include=job-application,user&page[size]=${pageSize}`;\nlet pageCount = 0;\nconst maxPages = 50; // Safety limit to prevent infinite loops\n\nconsole.log('Starting to fetch job offers with pagination...');\n\nwhile (nextUrl && pageCount < maxPages) {\n  try {\n    // Make HTTP request with proper headers\n    const response = await this.helpers.httpRequest({\n      method: 'GET',\n      url: nextUrl,\n      headers: {\n        'Authorization': `Bearer ${apiToken}`,\n        'X-Api-Version': '20240404',\n        'Accept': 'application/vnd.api+json',\n        'Content-Type': 'application/vnd.api+json'\n      },\n      json: true\n    });\n    \n    pageCount++;\n    console.log(`Fetched page ${pageCount}, got ${response.data?.length || 0} offers`);\n    \n    // Add offers from this page\n    if (response.data && Array.isArray(response.data)) {\n      allOffers = allOffers.concat(response.data);\n    }\n    \n    // Check for next page\n    nextUrl = response.links?.next || null;\n    \n    // Log pagination info\n    if (response.meta) {\n      console.log(`Total records: ${response.meta['record-count']}, Total pages: ${response.meta['page-count']}`);\n    }\n    \n  } catch (error) {\n    console.error(`Error fetching page ${pageCount + 1}:`, error.message);\n    console.error('Full error details:', error);\n    throw error;\n  }\n}\n\nconsole.log(`Pagination complete. Fetched ${pageCount} pages with total ${allOffers.length} offers`);\n\n// Return all offers as a single item with data array\nreturn [{\n  json: {\n    data: allOffers,\n    meta: {\n      totalOffers: allOffers.length,\n      pagesProcessed: pageCount\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -592,
        48
      ],
      "id": "WEBHOOK_ID_09_PLACEHOLDER",
      "name": "Fetch All Job Offers (Paginated)"
    },
    {
      "parameters": {
        "jsCode": "// Find offer for this application\nconst webhook = $('Webhook').first().json.body;\nconst applicationId = String(webhook.id); // Ensure it's a string\nconst offersResponse = $input.all()[0].json;\n\nconsole.log('Looking for application ID:', applicationId);\nconsole.log('Total offers received:', offersResponse.data?.length || 0);\n\nlet matchingOffer = null;\nlet debugInfo = [];\n\n// Search in data array (already parsed from paginated fetch)\nif (offersResponse && offersResponse.data && Array.isArray(offersResponse.data)) {\n  console.log('Searching through offers...');\n  \n  for (const offer of offersResponse.data) {\n    const jobAppData = offer.relationships?.['job-application']?.data;\n    if (jobAppData) {\n      const offerId = String(jobAppData.id);\n      debugInfo.push({\n        offerId: offer.id,\n        jobApplicationId: offerId,\n        matches: offerId === applicationId\n      });\n      \n      if (offerId === applicationId) {\n        matchingOffer = offer;\n        console.log('Found matching offer:', offer.id);\n        break;\n      }\n    }\n  }\n} else {\n  console.log('No offers data array found');\n}\n\nconsole.log('Debug info (first 10):', JSON.stringify(debugInfo.slice(0, 10), null, 2));\n\n// If we found a matching offer, extract key data\nif (matchingOffer) {\n  const offerDetails = matchingOffer.attributes.details || {};\n  \n  return [{\n    json: {\n      found: true,\n      offerId: matchingOffer.id,\n      status: matchingOffer.attributes.status,\n      details: offerDetails,\n      salary: offerDetails.salary || offerDetails.Compensation,\n      startDate: offerDetails['Start day'] || offerDetails['start-date'],\n      applicationId: applicationId,\n      offerData: matchingOffer,\n      debugInfo: debugInfo.slice(0, 10), // Limit debug info size\n      totalOffersSearched: offersResponse.data.length,\n      pagesProcessed: offersResponse.meta?.pagesProcessed || 1\n    }\n  }];\n} else {\n  // No offer found - use default values\n  return [{\n    json: {\n      found: false,\n      applicationId: applicationId,\n      salary: null,\n      startDate: null,\n      message: \"No offer found for this application\",\n      debugInfo: debugInfo.slice(0, 10),\n      totalOffersSearched: offersResponse.data?.length || 0,\n      pagesProcessed: offersResponse.meta?.pagesProcessed || 0\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -384,
        48
      ],
      "id": "WEBHOOK_ID_10_PLACEHOLDER",
      "name": "Process Job Offers"
    },
    {
      "parameters": {
        "url": "=https://api.teamtailor.com/v1/jobs/{{ $json.body.job_id }}/requisition",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Api-Version",
              "value": "20240404"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -592,
        208
      ],
      "id": "WEBHOOK_ID_11_PLACEHOLDER",
      "name": "HTTP Request to TeamTailor Show the Job Requisition",
      "credentials": {
        "httpBearerAuth": {
          "id": "CREDENTIAL_ID_03_PLACEHOLDER",
          "name": "TeamTailor"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -592,
        448
      ],
      "id": "WEBHOOK_ID_12_PLACEHOLDER",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Api-Version",
              "value": "20240404"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -192,
        208
      ],
      "id": "WEBHOOK_ID_13_PLACEHOLDER",
      "name": "HTTP Request",
      "credentials": {
        "httpBearerAuth": {
          "id": "CREDENTIAL_ID_03_PLACEHOLDER",
          "name": "TeamTailor"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * Build final employee payload using MERGED data\n * IMPROVED VERSION with comprehensive edge case handling\n */\n\n// Helper functions\nconst toYmd = (d) => {\n  const y = d.getFullYear();\n  const m = String(d.getMonth() + 1).padStart(2, '0');\n  const day = String(d.getDate()).padStart(2, '0');\n  return `${y}-${m}-${day}`;\n};\n\nconst safeDateParse = (dateStr) => {\n  if (!dateStr) return null;\n  try {\n    const date = new Date(dateStr);\n    return isNaN(date.getTime()) ? null : date;\n  } catch (error) {\n    console.warn('Failed to parse date:', dateStr, error.message);\n    return null;\n  }\n};\n\nconst parseSalaryInfo = (salaryStr) => {\n  if (!salaryStr) return { amount: null, payPer: 'Year' };\n  \n  if (typeof salaryStr === 'number') {\n    return { amount: salaryStr, payPer: 'Year' };\n  }\n  \n  const salaryString = salaryStr.toString();\n  const amountMatch = salaryString.match(/[0-9,]+/);\n  const amount = amountMatch ? parseInt(amountMatch[0].replace(/,/g, '')) : null;\n  \n  let payPer = 'Year';\n  if (salaryString.toLowerCase().includes('month')) {\n    payPer = 'Month';\n  } else if (salaryString.toLowerCase().includes('week')) {\n    payPer = 'Week';\n  } else if (salaryString.toLowerCase().includes('hour')) {\n    payPer = 'Hour';\n  } else if (salaryString.toLowerCase().includes('day')) {\n    payPer = 'Day';\n  }\n  \n  return { amount, payPer };\n};\n\n// ===== MAIN LOGIC =====\n\n// 1. VALIDATE WEBHOOK DATA (CRITICAL)\nconst webhook = $('Webhook').first().json.body;\n\nif (!webhook || !webhook.candidate) {\n  console.error('Invalid webhook structure:', webhook);\n  throw new Error('Webhook missing required candidate data');\n}\n\nconst cand = webhook.candidate || {};\nif (!cand.first_name || !cand.last_name || !cand.email) {\n  console.error('Missing required candidate fields:', {\n    firstName: !!cand.first_name,\n    lastName: !!cand.last_name,\n    email: !!cand.email\n  });\n  throw new Error('Candidate missing required fields (first_name, last_name, email)');\n}\n\n// 2. PROCESS MERGED DATA\nconst mergedItems = $input.all();\n\n// Validate merge data\nif (mergedItems.length < 2) {\n  console.warn('Merge node received insufficient data:', mergedItems.length, 'items');\n}\n\nlet offerData = null;\nlet departmentData = null;\nlet requisitionData = null;\n\n// Process merged items\nfor (const item of mergedItems) {\n  const json = item.json;\n  \n  // Check if this is offer data\n  if (json.found !== undefined && json.applicationId) {\n    offerData = json;\n  }\n  \n  // Check if this is department data\n  if (json.type === 'departments' || (json.data && json.data.type === 'departments')) {\n    departmentData = json.data || json;\n  }\n  \n  // Check if requisition data is embedded\n  if (json.requisitionData) {\n    requisitionData = json.requisitionData;\n  }\n}\n\n// 3. EXTRACT REQUISITION DATA WITH FALLBACKS\nlet reqAttrs = {};\nlet cfa = {};\nlet reqTitle = null;\nlet teamName = null;\nlet candidateLevel = null;\n\nif (requisitionData?.attributes) {\n  reqAttrs = requisitionData.attributes;\n  cfa = reqAttrs['custom-form-answers'] || {};\n  reqTitle = reqAttrs['job-title'];\n  teamName = cfa.team;\n  candidateLevel = cfa.level_of_candidate;\n} else {\n  console.warn('No requisition data found, using webhook fallbacks');\n  // Fallback to webhook data\n  reqTitle = webhook.job_title;\n  teamName = webhook.team || null;\n  candidateLevel = webhook.level || null;\n}\n\n// 4. EXTRACT ALL NEEDED DATA\nconst departmentName = departmentData?.attributes?.name || null;\n\n// Build job title with level\nlet jobTitle = webhook.job_title || reqTitle || null;\nif (candidateLevel && jobTitle) {\n  jobTitle = `${candidateLevel} ${jobTitle}`.trim();\n}\n\n// 5. DETERMINE HIRE DATE WITH SAFE PARSING\nlet hireDate = null;\nif (offerData?.found && offerData.startDate) {\n  const parsedDate = safeDateParse(offerData.startDate);\n  hireDate = parsedDate ? toYmd(parsedDate) : null;\n}\n\nif (!hireDate) {\n  const updCandidate = safeDateParse(webhook?.candidate?.updated_at);\n  const updWebhook = safeDateParse(webhook?.updated_at);\n  \n  if (updCandidate) hireDate = toYmd(updCandidate);\n  else if (updWebhook) hireDate = toYmd(updWebhook);\n  else hireDate = toYmd(new Date()); // Final fallback to today\n}\n\n// 6. EXTRACT SALARY INFO\nlet salaryInfo = { amount: null, payPer: 'Year' };\nif (offerData?.found && offerData.salary) {\n  salaryInfo = parseSalaryInfo(offerData.salary);\n}\n\n// 7. VALIDATE MINIMUM REQUIRED DATA\nconsole.log('Data validation:', {\n  hasOfferData: !!offerData,\n  hasDepartmentData: !!departmentData,\n  hasRequisitionData: !!requisitionData,\n  mergedItemsCount: mergedItems.length,\n  offerFound: offerData?.found || false,\n  departmentName: departmentName || 'NOT_FOUND',\n  jobTitle: jobTitle || 'NOT_FOUND',\n  hireDate: hireDate || 'NOT_FOUND'\n});\n\nif (!offerData && !requisitionData) {\n  console.error('Critical: No offer or requisition data available');\n  throw new Error('Insufficient data to create employee');\n}\n\n// 8. BUILD EMPLOYEE OBJECT\nconst employee = {\n  firstName: cand.first_name,\n  lastName: cand.last_name,\n  jobTitle: jobTitle || 'Unknown Position',\n  hireDate,\n  email: cand.email,\n  salary: salaryInfo.amount,\n  payPer: salaryInfo.payPer,\n  employmentStatus: (offerData?.found && offerData?.status === 'accepted') ? 'Active' : 'Pending',\n  offerStatus: offerData?.status || 'no_offer',\n  offerId: offerData?.offerId || null\n};\n\n// Add optional fields\nif (departmentName) employee.department = departmentName;\nif (teamName) employee.division = teamName;\nif (cand.phone) employee.phone = cand.phone;\n\n// 9. FINAL VALIDATION AND LOGGING\nconsole.log('Employee Payload Created:', {\n  name: `${employee.firstName} ${employee.lastName}`,\n  email: employee.email,\n  department: employee.department || 'NOT_SET',\n  jobTitle: employee.jobTitle,\n  hireDate: employee.hireDate,\n  salary: employee.salary ? `$${employee.salary} ${employee.payPer}` : 'NOT_SET',\n  offerStatus: employee.offerStatus\n});\n\nreturn [{ json: employee }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        32
      ],
      "id": "WEBHOOK_ID_14_PLACEHOLDER",
      "name": "Build Employee Payload"
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "companyDomain",
              "stringValue": "viragames"
            }
          ]
        },
        "options": {}
      },
      "id": "WEBHOOK_ID_15_PLACEHOLDER",
      "name": "Set Company Domain",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [
        1024,
        144
      ]
    },
    {
      "parameters": {
        "url": "=https://{{ $json.companyDomain }}.bamboohr.com/api/v1/meta/lists",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "WEBHOOK_ID_16_PLACEHOLDER",
      "name": "Get BambooHR Meta Fields",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1280,
        144
      ],
      "credentials": {
        "httpBearerAuth": {
          "id": "CREDENTIAL_ID_03_PLACEHOLDER",
          "name": "TeamTailor"
        },
        "httpBasicAuth": {
          "id": "CREDENTIAL_ID_06_PLACEHOLDER",
          "name": "BambooHR Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node: Process Field Discovery (Alternative for Split Items)\n\n/***********************************************************************\n * 1. GET ALL ITEMS (when Split Into Items is ON)\n ***********************************************************************/\n// When \"Split Into Items\" is ON, we need to collect all items\nconst allItems = $input.all();\nconst metaFields = allItems.map(item => item.json);\n\n// The test employee data from the starting node.\nconst employeeData = $(\"Build Employee Payload\").all();\n\n/***********************************************************************\n * 2. VALIDATE THE INPUT DATA STRUCTURE\n ***********************************************************************/\nconsole.log(`Received ${metaFields.length} meta fields from BambooHR`);\n\n/***********************************************************************\n * 3. MAP FIELD NAMES TO IDs\n ***********************************************************************/\nconst fieldMapping = {};\n\nfor (const field of metaFields) {\n  // We only care about fields that can be managed via the API.\n  if (field.manageable !== 'yes') {\n    continue;\n  }\n\n  const id = parseInt(field.fieldId, 10);\n  const alias = (field.alias || '').toLowerCase();\n  const name = (field.name || '').toLowerCase();\n\n  // Use the 'alias' for primary matching when available\n  if (alias) {\n    switch (alias) {\n      case 'department':\n        fieldMapping.department = id;\n        break;\n      case 'division':\n        fieldMapping.division = id;\n        break;\n      case 'jobtitle':\n        fieldMapping.jobTitle = id;\n        break;\n      case 'location':\n        fieldMapping.location = id;\n        break;\n      case 'team':\n        fieldMapping.team = id;\n        break;\n      case 'customteams':\n        // Fallback for custom teams field\n        if (!fieldMapping.team) {\n          fieldMapping.team = id;\n        }\n        break;\n    }\n  }\n  \n  // Secondary check based on name if alias didn't match\n  if (!alias || !fieldMapping.jobTitle) {\n    if (name === 'job title' && !fieldMapping.jobTitle) {\n      fieldMapping.jobTitle = id;\n    }\n  }\n}\n\n/***********************************************************************\n * 4. DEBUG OUTPUT\n ***********************************************************************/\nconsole.log('Discovered field mappings:', JSON.stringify(fieldMapping, null, 2));\n\n// Log which fields we found and which we didn't\nconst expectedFields = ['department', 'division', 'jobTitle'];\nfor (const fieldName of expectedFields) {\n  if (fieldMapping[fieldName]) {\n    console.log(`✓ Found ${fieldName}: fieldId = ${fieldMapping[fieldName]}`);\n  } else {\n    console.warn(`✗ Could not find ${fieldName} field`);\n  }\n}\n\n/***********************************************************************\n * 5. FINAL OUTPUT\n ***********************************************************************/\nreturn [{\n  json: {\n    fieldMapping,\n    employeeData,\n    metaFields\n  }\n}];"
      },
      "id": "WEBHOOK_ID_17_PLACEHOLDER",
      "name": "Process Field Discovery",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1520,
        144
      ]
    },
    {
      "parameters": {
        "jsCode": "const { fieldMapping, employeeData, metaFields } = $input.all()[0].json;\n\n// Function to find existing options for a field\nfunction getExistingOptions(fieldName) {\n  const fieldId = fieldMapping[fieldName];\n  if (!fieldId) return [];\n  \n  const field = metaFields.find(f => f.fieldId === fieldId);\n  return field ? field.options || [] : [];\n}\n\n// Function to check if option exists\nfunction optionExists(fieldName, optionValue) {\n  const options = getExistingOptions(fieldName);\n  return options.find(option => \n    (option.value || '').toLowerCase() === optionValue.toLowerCase() ||\n    (option.name || '').toLowerCase() === optionValue.toLowerCase()\n  );\n}\n\n// Check required organizational fields\nconst requiredFields = ['department', 'division', 'jobTitle'];\nconst validationResults = {};\nconst missingFields = [];\n\nfor (const fieldName of requiredFields) {\n  const fieldId = fieldMapping[fieldName];\n  const optionValue = employeeData[fieldName];\n  \n  if (!fieldId) {\n    validationResults[fieldName] = { \n      status: 'field_missing', \n      message: `Field ID not found for ${fieldName}` \n    };\n  } else if (!optionValue) {\n    validationResults[fieldName] = { \n      status: 'value_missing', \n      message: `No value provided for ${fieldName}` \n    };\n  } else {\n    const existingOption = optionExists(fieldName, optionValue);\n    if (existingOption) {\n      validationResults[fieldName] = {\n        status: 'exists',\n        option: existingOption,\n        fieldId: fieldId\n      };\n    } else {\n      validationResults[fieldName] = {\n        status: 'needs_creation',\n        value: optionValue,\n        fieldId: fieldId\n      };\n      missingFields.push(fieldName);\n    }\n  }\n}\n\nconsole.log('Validation results:', validationResults);\nconsole.log('Missing fields:', missingFields);\n\nreturn [{\n  json: {\n    validationResults: validationResults,\n    missingFields: missingFields,\n    fieldMapping: fieldMapping,\n    employeeData: employeeData,\n    metaFields: metaFields,\n    needsCreation: missingFields.length > 0\n  }\n}];"
      },
      "id": "WEBHOOK_ID_18_PLACEHOLDER",
      "name": "Validate Meta Field Options",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1728,
        144
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.needsCreation }}",
              "value2": true
            }
          ]
        }
      },
      "id": "WEBHOOK_ID_19_PLACEHOLDER",
      "name": "Need to Create Fields?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2000,
        144
      ]
    },
    {
      "parameters": {
        "jsCode": "const { missingFields, validationResults, metaFields, fieldMapping, employeeData } = $input.all()[0].json;\n\n// Create meta field options for missing fields\nconst creationPromises = [];\n\nfor (const fieldName of missingFields) {\n  const fieldId = validationResults[fieldName].fieldId;\n  const newValue = validationResults[fieldName].value;\n  \n  // Get existing options for the field\n  const field = metaFields.find(f => f.fieldId === fieldId);\n  const existingOptions = field ? field.options || [] : [];\n  \n  // Add new option to existing options - using the correct format that matches Python\n  const updatedOptions = [...existingOptions, { \"value\": newValue }];\n  \n  creationPromises.push({\n    fieldName: fieldName,\n    fieldId: fieldId,\n    newValue: newValue,\n    updatedOptions: updatedOptions\n  });\n}\n\nreturn creationPromises.map(item => ({ json: { ...item, employeeData, fieldMapping } }));"
      },
      "id": "WEBHOOK_ID_20_PLACEHOLDER",
      "name": "Prepare Meta Field Creation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2208,
        48
      ]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://{{ $('Set Company Domain').first().json.companyDomain }}.bamboohr.com/api/v1/meta/lists/{{ $json.fieldId }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\"options\": $json.updatedOptions} }}",
        "options": {}
      },
      "id": "WEBHOOK_ID_21_PLACEHOLDER",
      "name": "Create Meta Field Option",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        2432,
        48
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "CREDENTIAL_ID_06_PLACEHOLDER",
          "name": "BambooHR Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://{{ $('Set Company Domain').first().json.companyDomain }}.bamboohr.com/api/v1/meta/lists",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "WEBHOOK_ID_22_PLACEHOLDER",
      "name": "Refresh Meta Fields",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        2288,
        256
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "CREDENTIAL_ID_06_PLACEHOLDER",
          "name": "BambooHR Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const { json: root } = $('Validate Meta Field Options').first();\n\n// Unwrap employee data\nconst employeeDataArr = root.employeeData;\nconst employeeData = Array.isArray(employeeDataArr)\n  ? (employeeDataArr[0]?.json || {})\n  : employeeDataArr;\n\n// Field mapping / meta-field options\nconst fieldMapping = root.fieldMapping;\nconst allItems      = $input.all();\nconst updatedMetaFields = (allItems.length === 1 && Array.isArray(allItems[0].json))\n  ? allItems[0].json           // full array came in a single item\n  : allItems.map(i => i.json); // split items\n\nfunction getOptionId(fieldName, optionValue) {\n  const fieldId = fieldMapping[fieldName];\n  if (!fieldId) return null;\n\n  const field = updatedMetaFields.find(f => f.fieldId === fieldId);\n  if (!field || !field.options) return null;\n\n  const opt = field.options.find(o =>\n    (o.value || '').toLowerCase() === optionValue.toLowerCase() ||\n    (o.name  || '').toLowerCase() === optionValue.toLowerCase()\n  );\n  return opt?.id ?? null;\n}\n\n// Build enhanced payload with offer data\nconst employeePayload = {\n  firstName: employeeData.firstName,\n  lastName:  employeeData.lastName,\n  workEmail: employeeData.email,\n  hireDate:  employeeData.hireDate,\n  employmentHistoryStatus: employeeData.employmentStatus || 'Full-Time',\n  payType:  'Salary',\n  payPer:   employeeData.payPer || 'Year', // Use dynamic pay period from offer\n  exempt:   employeeData.exempt   || 'Exempt',\n  location: employeeData.location || 'Remote',\n};\n\n// Add salary if available from offer\nif (employeeData.salary) {\n  employeePayload.payRate = employeeData.salary;\n}\n\n// Add phone if available\nif (employeeData.phone) {\n  employeePayload.mobilePhone = employeeData.phone;\n}\n\n// Hybrid organisational fields\n['department', 'division', 'jobTitle'].forEach(field => {\n  if (employeeData[field]) {\n    employeePayload[field] = employeeData[field];\n    const id = getOptionId(field, employeeData[field]);\n    if (id) employeePayload[`${field}Id`] = id;\n  }\n});\n\n// Add custom fields for offer tracking\nif (employeeData.offerId) {\n  employeePayload.customOfferId = employeeData.offerId;\n}\nif (employeeData.offerStatus) {\n  employeePayload.customOfferStatus = employeeData.offerStatus;\n}\n\nconsole.log('Enhanced employee payload:', employeePayload);\n\nreturn [\n  {\n    json: {\n      employeePayload,\n      originalData: employeeData,\n      offerData: {\n        offerId: employeeData.offerId,\n        offerStatus: employeeData.offerStatus,\n        salary: employeeData.salary,\n        hireDate: employeeData.hireDate\n      }\n    }\n  }\n];"
      },
      "id": "WEBHOOK_ID_23_PLACEHOLDER",
      "name": "Prepare Employee Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2480,
        256
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://{{ $('Set Company Domain').first().json.companyDomain }}.bamboohr.com/api/v1/datasets/employee",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\"fields\": [\"firstName\", \"lastName\", \"email\", \"jobInformationDepartment\", \"jobInformationDivision\", \"jobInformationJobTitle\"], \"filters\": [], \"sortBy\": [{\"field\": \"firstName\", \"sort\": \"asc\"}]} }}",
        "options": {}
      },
      "id": "WEBHOOK_ID_24_PLACEHOLDER",
      "name": "Check Employee Exists",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        2672,
        256
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "CREDENTIAL_ID_06_PLACEHOLDER",
          "name": "BambooHR Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Check if employee already exists by email\nconst employeeData = $('Prepare Employee Data').first().json;\nconst datasetResponse = $input.all()[0].json;\nconst targetEmail = employeeData.originalData.email;\n\nconsole.log('Checking if employee exists with email:', targetEmail);\nconsole.log('Dataset response:', datasetResponse);\n\nlet existingEmployee = null;\nlet employeeExists = false;\n\n// Check if we have a valid dataset response\nif (datasetResponse && datasetResponse.data && Array.isArray(datasetResponse.data)) {\n  // Search through dataset for matching email\n  for (const employee of datasetResponse.data) {\n    if (employee.email && employee.email.toLowerCase() === targetEmail.toLowerCase()) {\n      existingEmployee = employee;\n      employeeExists = true;\n      console.log('Found existing employee:', employee);\n      break;\n    }\n  }\n}\n\nif (employeeExists) {\n  console.log('Employee already exists, skipping creation');\n  return [{\n    json: {\n      employeeExists: true,\n      existingEmployee: existingEmployee,\n      message: 'Employee already exists in BambooHR',\n      employeeData: employeeData,\n      skipCreation: true\n    }\n  }];\n} else {\n  console.log('Employee does not exist, proceeding with creation');\n  return [{\n    json: {\n      employeeExists: false,\n      employeeData: employeeData,\n      skipCreation: false\n    }\n  }];\n}"
      },
      "id": "WEBHOOK_ID_25_PLACEHOLDER",
      "name": "Process Employee Check",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2864,
        256
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "employee-exists-check",
              "leftValue": "={{ $json.employeeExists }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "WEBHOOK_ID_26_PLACEHOLDER",
      "name": "Employee Exists?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3056,
        256
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://{{ $('Set Company Domain').first().json.companyDomain }}.bamboohr.com/api/v1/employees",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.employeeData.employeePayload }}",
        "options": {}
      },
      "id": "WEBHOOK_ID_27_PLACEHOLDER",
      "name": "Create Employee",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        3248,
        256
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "CREDENTIAL_ID_06_PLACEHOLDER",
          "name": "BambooHR Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const response = $input.all()[0];\nconst employeeData = $('Prepare Employee Data').first().json;\nconst companyDomain = $('Set Company Domain').first().json.companyDomain;\n\n// Extract employee ID from Location header if available\nlet employeeId = null;\nif (response.headers && response.headers.location) {\n  const locationMatch = response.headers.location.match(/\\/employees\\/(\\d+)/);\n  if (locationMatch) {\n    employeeId = parseInt(locationMatch[1]);\n  }\n}\n\nreturn [{\n  json: {\n    success: true,\n    message: \"Employee created successfully with offer data\",\n    employee: {\n      id: employeeId,\n      name: `${employeeData.originalData.firstName} ${employeeData.originalData.lastName}`,\n      email: employeeData.originalData.email,\n      department: employeeData.originalData.department,\n      division: employeeData.originalData.division,\n      jobTitle: employeeData.originalData.jobTitle,\n      hireDate: employeeData.originalData.hireDate,\n      salary: employeeData.originalData.salary\n    },\n    offerData: employeeData.offerData,\n    bambooHrUrl: employeeId ? \n      `https://${companyDomain}.bamboohr.com/employees/${employeeId}` : null,    createdAt: new Date().toISOString(),\n    alreadyExisted: false\n  }\n}];"
      },
      "id": "WEBHOOK_ID_28_PLACEHOLDER",
      "name": "Process Success Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3440,
        256
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle case when employee already exists\nconst checkResult = $('Process Employee Check').first().json;\nconst existingEmployee = checkResult.existingEmployee;\nconst employeeData = checkResult.employeeData;\nconst companyDomain = $('Set Company Domain').first().json.companyDomain;\n\n// Use ONLY the fields that actually exist in the payload\nreturn [{\n  json: {\n    success: true,\n    message: \"Employee already exists in BambooHR\",\n    employee: {\n      id: existingEmployee.id,\n      name: `${existingEmployee.firstName} ${existingEmployee.lastName}`,\n      email: existingEmployee.email,\n      department: existingEmployee.jobInformationDepartment,\n      division: existingEmployee.jobInformationDivision,\n      jobTitle: existingEmployee.jobInformationJobTitle\n      // Note: hireDate, salary, payPer are NOT in your payload\n    },\n    offerData: {\n      offerId: null,\n      offerStatus: 'existing_employee',\n      salary: null, // Not in your payload\n      hireDate: null // Not in your payload\n    },\n    bambooHrUrl: existingEmployee.id ? \n      `https://${companyDomain}.bamboohr.com/employees/${existingEmployee.id}` : null,\n    createdAt: new Date().toISOString(),\n    alreadyExisted: true,\n    existingEmployeeData: existingEmployee // Include full existing data for reference\n  }\n}];"
      },
      "id": "WEBHOOK_ID_29_PLACEHOLDER",
      "name": "Process Existing Employee",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3264,
        -16
      ]
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C097URH3622",
          "mode": "list",
          "cachedResultName": "onboarding"
        },
        "text": "={{ `${$json[\"alreadyExisted\"] ? '✅' : '🎉'} *${$json[\"alreadyExisted\"] ? 'Employee Already Exists in BambooHR' : 'New Employee Created Successfully!'}*\n\n*Name:* ${$json[\"employee\"][\"name\"]}\n*Email:* ${$json[\"employee\"][\"email\"]}\n*Department:* ${$json[\"employee\"][\"department\"]}\n*Job Title:* ${$json[\"employee\"][\"jobTitle\"]}\n*Hire Date:* ${$json[\"employee\"][\"hireDate\"]}\n*Salary:* ${$json[\"employee\"][\"salary\"] ? '$' + $json[\"employee\"][\"salary\"] + ' USD/year' : 'Not specified'}\n\n*Offer Data:*\n• Offer ID: ${$json[\"offerData\"][\"offerId\"] || 'N/A'}\n• Offer Status: ${$json[\"offerData\"][\"offerStatus\"] || 'N/A'}\n\n*${$json[\"alreadyExisted\"] ? 'Found At' : 'Created At'}:* ${new Date($json[\"createdAt\"]).toLocaleString(\"en-GB\", { timeZone: \"UTC\" })}\n\n*Status:* ${$json[\"message\"]}\n${$json[\"bambooHrUrl\"] ? `\n*BambooHR Link:* ${$json[\"bambooHrUrl\"]}` : ''}\n` }}",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        3744,
        160
      ],
      "id": "WEBHOOK_ID_30_PLACEHOLDER",
      "name": "Send Notification – Employee Created",
      "webhookId": "WEBHOOK_ID_31_PLACEHOLDER",
      "credentials": {
        "slackApi": {
          "id": "CREDENTIAL_ID_04_PLACEHOLDER",
          "name": "Vira Bot"
        }
      }
    },
    {
      "parameters": {
        "content": "# Production",
        "height": 1248,
        "width": 5456,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1280,
        -368
      ],
      "typeVersion": 1,
      "id": "WEBHOOK_ID_32_PLACEHOLDER",
      "name": "Sticky Note"
    }
  ],
  "connections": {
    "convert to json object2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "convert to json object3": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Build Employee Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Hired",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Hired": {
      "main": [
        [
          {
            "node": "Fetch All Job Offers (Paginated)",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request to TeamTailor Show the Job Requisition",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch All Job Offers (Paginated)": {
      "main": [
        [
          {
            "node": "Process Job Offers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Job Offers": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request to TeamTailor Show the Job Requisition": {
      "main": [
        [
          {
            "node": "convert to json object3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "convert to json object2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Employee Payload": {
      "main": [
        [
          {
            "node": "Set Company Domain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Company Domain": {
      "main": [
        [
          {
            "node": "Get BambooHR Meta Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get BambooHR Meta Fields": {
      "main": [
        [
          {
            "node": "Process Field Discovery",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Field Discovery": {
      "main": [
        [
          {
            "node": "Validate Meta Field Options",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Meta Field Options": {
      "main": [
        [
          {
            "node": "Need to Create Fields?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Need to Create Fields?": {
      "main": [
        [
          {
            "node": "Prepare Meta Field Creation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Refresh Meta Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Meta Field Creation": {
      "main": [
        [
          {
            "node": "Create Meta Field Option",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Meta Field Option": {
      "main": [
        [
          {
            "node": "Refresh Meta Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Refresh Meta Fields": {
      "main": [
        [
          {
            "node": "Prepare Employee Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Employee Data": {
      "main": [
        [
          {
            "node": "Check Employee Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Employee Exists": {
      "main": [
        [
          {
            "node": "Process Employee Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Employee Check": {
      "main": [
        [
          {
            "node": "Employee Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Employee Exists?": {
      "main": [
        [
          {
            "node": "Process Existing Employee",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Employee",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Employee": {
      "main": [
        [
          {
            "node": "Process Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Success Response": {
      "main": [
        [
          {
            "node": "Send Notification – Employee Created",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Existing Employee": {
      "main": [
        [
          {
            "node": "Send Notification – Employee Created",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "NOTION_DATABASE_ID_03_PLACEHOLDERNOTION_DATABASE_ID_04_PLACEHOLDER"
  }
}