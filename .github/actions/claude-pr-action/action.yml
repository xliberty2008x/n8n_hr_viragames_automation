name: "Claude PR Action"
description: "Replies with Claude via Amazon Bedrock"
inputs:
  trigger_phrase:
    required: true
  timeout_minutes:
    required: false
    default: "60"
  github_token:
    required: true
  use_bedrock:
    required: true
  model:
    required: true
runs:
  using: "composite"
  steps:
    - name: Install AWS CLI
      shell: bash
      run: |
        sudo apt-get update -y
        sudo apt-get install -y awscli jq

    - name: Build Claude prompt
      id: prompt
      shell: bash
      run: |
        EVENT_FILE=$GITHUB_EVENT_PATH
        BODY=$(jq -r '.comment.body // .issue.body // ""' "$EVENT_FILE")
        echo "prompt<<EOF" >> $GITHUB_OUTPUT
        echo "$BODY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Invoke Claude
      id: claude
      shell: bash
      env:
        MODEL_ID: ${{ inputs.model }}
      run: |
        # Prepare the prompt
        PROMPT="${{ steps.prompt.outputs.prompt }}"
        
        # Create request body
        REQUEST_BODY=$(jq -n \
          --arg prompt "$PROMPT" \
          '{
            "anthropic_version": "bedrock-2023-05-31",
            "max_tokens": 1024,
            "messages": [
              {
                "role": "user",
                "content": $prompt
              }
            ]
          }')
        
        # Call Bedrock
        RESPONSE=$(aws bedrock-runtime invoke-model \
          --region $AWS_REGION \
          --model-id "$MODEL_ID" \
          --content-type application/json \
          --accept application/json \
          --body "$REQUEST_BODY" \
          --output json /dev/stdout | jq -r '.content[0].text // .completion // "No response from Claude"')
        
        # Set output
        echo "answer<<EOF" >> $GITHUB_OUTPUT
        echo "$RESPONSE" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Post reply
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}
      run: |
        # Get the comment URL
        EVENT_FILE=$GITHUB_EVENT_PATH
        
        if [ "${{ github.event_name }}" == "issue_comment" ] || [ "${{ github.event_name }}" == "pull_request_review_comment" ]; then
          # For comments, use the comment HTML URL and construct the API endpoint
          COMMENT_ID=$(jq -r '.comment.id' "$EVENT_FILE")
          ISSUE_NUMBER=$(jq -r '.issue.number // .pull_request.number' "$EVENT_FILE")
          REPO="${{ github.repository }}"
          
          # Post reply
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            "/repos/$REPO/issues/$ISSUE_NUMBER/comments" \
            -f body="${{ steps.claude.outputs.answer }}"
        else
          # For new issues
          ISSUE_URL=$(jq -r '.issue.html_url' "$EVENT_FILE")
          ISSUE_NUMBER=$(jq -r '.issue.number' "$EVENT_FILE")
          REPO="${{ github.repository }}"
          
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            "/repos/$REPO/issues/$ISSUE_NUMBER/comments" \
            -f body="${{ steps.claude.outputs.answer }}"
        fi
